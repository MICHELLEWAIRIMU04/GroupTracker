generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String          @id @default(cuid())
  username              String?         @unique
  email                 String          @unique
  emailVerified         DateTime?       @map("email_verified")
  password              String?
  image                 String?
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  emailVerificationToken String?        @map("email_verification_token")
  emailVerificationExpires DateTime?    @map("email_verification_expires")
  
  accounts              Account[]
  sessions              Session[]
  contributions         Contribution[]
  ownedGroups          Group[]         @relation("GroupOwner")
  groups               GroupMember[]
  sentInvites          GroupInvite[]   @relation("InviteSender")
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  ownerId     String        @map("owner_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  owner       User          @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  activities  Activity[]
  invites     GroupInvite[]
  
  @@map("groups")
}

model GroupMember {
  userId    String   @map("user_id")
  groupId   Int      @map("group_id")
  isAdmin   Boolean  @default(false) @map("is_admin")
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@id([userId, groupId])
  @@map("group_members")
}

model GroupInvite {
  id          Int      @id @default(autoincrement())
  email       String
  groupId     Int      @map("group_id")
  invitedById String   @map("invited_by_id")
  isAdmin     Boolean  @default(false) @map("is_admin")
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  acceptedAt  DateTime? @map("accepted_at")
  
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitedBy   User     @relation("InviteSender", fields: [invitedById], references: [id], onDelete: Cascade)
  
  @@unique([email, groupId])
  @@map("group_invites")
}

model Activity {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  groupId     Int           @map("group_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  group         Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  contributions Contribution[]
  
  @@map("activities")
}

model Contribution {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id")
  activityId       Int      @map("activity_id")
  contributionType String   @map("contribution_type")
  amount           Float
  currency         String?  @default("USD")
  description      String?
  date             DateTime @default(now())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@map("contributions")
}